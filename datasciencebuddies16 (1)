{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"datasciencebuddies16","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"cPL7pimFWbOg"},"source":["\n","# **Product Happiness Score App**\n","\n","\n","---\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Z68wkZGkWAjD"},"source":["\n","\n","Consumption that satisfies certain needs and desires can lead to a feeling of happiness and fulfillment-> example : I feel good because I bought organic eggs. / I feel happy because I chose a healthy snack. \n","\n","Today, the most accessible information about most products is the price. \n","Other information like nutritional values, origin, special qualities, etc. are not always visible on first sight "]},{"cell_type":"markdown","metadata":{"id":"FLUDXcNF50aG"},"source":["# **Coding Phase 1**\n","Load the test data set (baked goods, web scraped from Amazon) , clean the data set and finally standardize the product information "]},{"cell_type":"code","metadata":{"cellView":"code","id":"ZGVLAWqJFojk"},"source":["#first load pandas and numpy\n","import pandas as pd\n","import numpy as np\n","\n","############# Step one: Load data\n","\n","\n","#Read data (make sure to put the xlsx file into the folder on the left)\n","df = pd.read_excel (r'/content/backwaren_amazon.xlsx')\n","\n","#let's take a look at the data set\n","df.head()\n","\n","################### Step two: Clean the data and create price per weight\n","\n","# clean the product names\n","df.product_name=df.product_name.str.strip()\n","\n","# clean the price (no euro sign and numeric)\n","df.product_price = df.product_price.str.replace(\"€\", \"\")\n","df.product_price = df.product_price.str.replace(\",\", \".\")\n","df.product_price = df.product_price.astype('float')\n","\n","# calculate the weight column\n","df.Artikelgewicht = df.Artikelgewicht.str.replace(\"g\", \"\")\n","df.Artikelgewicht = df.Artikelgewicht.str.replace(\"k\", \"000\")\n","df.Artikelgewicht = df.Artikelgewicht.str.replace(\".\", \"\")\n","df.Artikelgewicht = df.Artikelgewicht.str.replace(\" \", \"\")\n","df.Artikelgewicht =df.Artikelgewicht.astype('float')\n","\n","# calculate price per 100 gramm\n","price100gramm = df.product_price/df.Artikelgewicht *100\n","#df['price100gramm'] = price100gramm\n","\n","price = pd.DataFrame(index = range(len(df.product_price)), columns = range(1)) \n","a20 = np.percentile(price100gramm, 20)\n","a40 = np.percentile(price100gramm, 40)\n","a60 = np.percentile(price100gramm, 60)\n","a80 = np.percentile(price100gramm, 80)\n","\n","for i in range(len(df.product_price)):\n","  if (price100gramm.iloc[i] < a20):\n","    price.iloc[i] = 1\n","  elif ((price100gramm.iloc[i] > a20) & (price100gramm.iloc[i] < a40)):\n","    price.iloc[i] = 0.8\n","  elif ((price100gramm.iloc[i] > a40) & (price100gramm.iloc[i] < a60)):\n","    price.iloc[i] = 0.6\n","  elif ((price100gramm.iloc[i] > a60) & (price100gramm.iloc[i] < a80)):\n","    price.iloc[i] = 0.4\n","  else:\n","    price.iloc[i] = 0.2\n","\n","df['price'] = price\n"," \n","\n","# get an overview of the \"Zertifizierung\"\n","df_zert = df.Zertifizierung.str.split(',', expand=True)\n","df_zert= pd.get_dummies(df_zert, dummy_na=True)\n","\n","\n","df_besonderheit=df.Besonderheit.str.split(',', expand=True)\n","df_besonderheit= pd.get_dummies(df_besonderheit, dummy_na=True)\n","\n","\n","\n","############ Step 3: create dummies for organic, vegan, local (Germany?), glutenfrei\n","\n","#no \"zertifzierung\"\n","#NoZert= df_zert[\"0_nan\"]*df_zert[\"1_nan\"]*df_zert[\"2_nan\"]\n","#NoZert[NoZert >0] = 1\n","\n","\n","#organic\n","\n","Organic=df_zert[\"0_Bio nach EG-Öko-Verordnung\"]+df_zert[\"0_Bio-Siegel (Deutschland)\"]+df_zert[\"0_EG-Öko-Verordnung\"]+df_zert[\"1_ BIOLAND\"]+df_zert[\"1_ Bioland\"]+df_zert[\"1_ EU Logo für ökologische Landwirtschaft\"]+df_besonderheit[\"0_Bio\"]+df_besonderheit[\"0_Biozertifiziert\"]+df_besonderheit[\"1_ Bio\"]+df_besonderheit[\"2_ Bio\"]\n","Organic[Organic >0] = 1\n","\n","#Fairtrade\n","Fairtrade=df_zert[\"0_Fairtrade Cocoa Program\"]+df_zert[\"0_Forest Stewardship Councel Mix\"]+df_zert[\"0_UTZ\"]+df_zert[\"0_UTZ Certified Cocoa\"]+df_zert[\"1_ UTZ Certified Cocoa\"]+df_zert[\"2_ UTZ Certified Cocoa\"]\n","Fairtrade[Fairtrade >0] = 1\n","\n","#vegan\n","Vegan = df_zert[\"0_V Label Vegan\"]+df_zert[\"1_ V Label Vegan\"]+df_besonderheit[\"0_Vegan\"]+df_besonderheit[\"1_ Vegan\"]+df_besonderheit[\"2_ Vegan\"]+df_besonderheit[\"3_ Vegan\"]+df_besonderheit[\"4_ Vegan\"]+df_besonderheit[\"0_Veganisch\"]\n","Vegan[Vegan >0] = 1\n","\n","#vegetarian\n","Vegetarian = df_zert[\"0_V Label Vegetarian\"]+df_zert[\"1_ V Label Vegetarian\"]+df_besonderheit[\"0_Vegetarisch\"]+df_besonderheit[\"1_ Vegetarisch\"]+df_besonderheit[\"4_ Vegetarisch\"]\n","Vegetarian[Vegetarian >0] = 1\n","\n","#Local (germany, yes/no)\n","df.loc[(df.Ursprungsland !=\"Germany\") ,\"Ursprungsland\"] = 0\n","df.loc[(df.Ursprungsland ==\"Germany\") ,\"Ursprungsland\"] = 1\n","Local= df['Ursprungsland']\n","\n","#Gluten free\n","\n","Glutenfree = df_zert[\"0_Durchgestrichene Ähre (glutenfrei)\"] + df_zert[\"1_ Durchgestrichene Ähre (glutenfrei)\"]+df_besonderheit[\"0_Glutenfrei\"]+df_besonderheit[\"1_ Glutenfrei\"]+df_besonderheit[\"2_ Glutenfrei\"]\n","Glutenfree[Glutenfree >0] = 1\n","Glutenfree[Glutenfree >0] = 1\n","\n","############ Step 4: combine useful things to a new data frame\n","\n","# create a dictonary \n","data = {\"name\": df.product_name, \n","        \"price\": df.price, \n","        \"organic\":Organic,\n","        #\"Fairtrade\":Fairtrade,\n","        \"vegan\":Vegan,\n","        #\"Vegetarian\":Vegetarian,\n","        \"local\":Local,\n","        \"gluten-free\":Glutenfree\n","            \n","        } \n","  \n","# Concatenating the series side together\n","bakedgoods = pd.concat(data, \n","               axis = 1) \n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zK-XDtXdXmFL","executionInfo":{"status":"ok","timestamp":1617079408694,"user_tz":-120,"elapsed":776,"user":{"displayName":"Philipp Wegner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgySvzVyeieRI3LZNKVnii-4bj7AsVvvvKJt4tG8w=s64","userId":"04890888630639332040"}},"outputId":"ac3a1cd6-9b7b-4497-e705-55e5041fa4a3"},"source":["#Test if the data is all there\n","\n","bakedgoods.sum()\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["name           Prinzen Rolle Cremys, 172gAmazon Marke - Happy...\n","price                                                      134.8\n","organic                                                       39\n","vegan                                                         21\n","local                                                        103\n","gluten-free                                                   19\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"IxZYg87Y59kJ"},"source":["# **Coding Phase 2**\n","Build interactive shopping assistant, get user input and create a digital twin of the user\n"]},{"cell_type":"code","metadata":{"id":"eFxFhRvJtVWL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617079431645,"user_tz":-120,"elapsed":20461,"user":{"displayName":"Philipp Wegner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgySvzVyeieRI3LZNKVnii-4bj7AsVvvvKJt4tG8w=s64","userId":"04890888630639332040"}},"outputId":"205ab287-c489-4d01-c9e7-c98e950f80d6"},"source":["\n","#Greeting and Explication of procedure \n","\n","print(\"Hello. To calculate the Happiness-Index for the product of your choice, we first need to ask you some questions\")\n","\n","# To know what our user wants, we have to get some data. We are going to ask him som questions he can answer using the input. \n","# To make sure that the user enters only data we can process afterwards, we chose to use two While-Loops, one to make sure that the user enters only numbers and a second one to control if the numer is between 1 and 5. \n","\n","# User preference : Price\n","\n","print(\"Please indicate on a scale of 1 (low) to 5 (high) how important the price of a product is to you.\")\n","while True : \n","  input_price = input()\n","  try: \n","    val=int(input_price)\n","    break\n","  except ValueError : \n","    print(\"Please enter a number\")\n","\n","while True : \n","  if input_price not in ('1',\"2\", \"3\", \"4\", \"5\"):\n","    print(\"Please enter a number between 1 and 5\")\n","    input_price = input()\n","  else : \n","    my_dict_price = {'price' : input_price} \n","    break\n","\n","print(\"Your choice in the category price: \", my_dict_price['price'], \"/ 5\")\n","\n","\n","#User preference : Organic \n","print(\"Please indicate on a scale of 1 (low) to 5 (high) how important is to you that a product is organic.\")\n","while True : \n","  input_sust = input()\n","  try: \n","    val=int(input_sust)\n","    break\n","  except ValueError : \n","    print(\"Please enter a number\")\n","\n","while True : \n","  if input_sust not in ('1',\"2\", \"3\", \"4\", \"5\"):\n","    print(\"Please enter a number between 1 and 5\")\n","    input_sust = input()\n","  else : \n","    my_dict_sust = {'organic' : input_sust} \n","    break\n","\n","print(\"Your choice in the category sustainability: \", my_dict_sust['organic'], \"/ 5\")\n","\n","#User preference : Local \n","print(\"Please indicate on a scale of 1 (low) to 5 (high) how important it is for you that a product is produced localy.\")\n","while True : \n","  input_local = input()\n","  try:\n","    val=int(input_local)\n","    break\n","  except ValueError : \n","    print(\"Please enter a number\")\n","\n","while True : \n","  if input_local not in ('1',\"2\", \"3\", \"4\", \"5\"):\n","    print(\"Please enter a number between 1 and 5\")\n","    input_local = input()\n","  else : \n","    my_dict_local = {'local' : input_local}\n","    break\n","    \n","print(\"Your choice in the category local: \", my_dict_local['local'], \"/ 5\")\n","\n","#For further imporovement, other categories couldb added. Here one example: \n","#User preference : Easy storage \n","#print(\"Please indicate on a scale of 1 to 5 how important it is for you that a product can be stored outside the fridge.\")\n","#while True : \n"," # input_storage = input()\n","  #try: \n","   # val=int(input_storage)\n","    #break\n","  #except ValueError : \n","   # print(\"Sorry, we were not able to process your input. Please enter a number\")\n","\n","#while True : \n"," # if input_storage not in ('1',\"2\", \"3\", \"4\", \"5\"):\n","  #  print(\"Please enter a number between 1 and 5\")\n","   # input_storage = input()\n","  #else : \n","   # my_dict_storage = {'easy storage' : input_storage} \n","    #break\n","\n","#print(\"Your choice in the category easy storage: \", my_dict_storage['easy storage'], \"/ 5\")\n","\n","# For the categories vegan and gluten-free, we used boolean-variables\n","#User preference : Vegan \n","\n","print(\"Please indicate with yes or no if it is important to you to buy vegan products.\")\n","input_vegan = input()\n","while True : \n","  if input_vegan not in (\"yes\",\"no\") :\n","    print(\"Please enter yes or no\")\n","    input_vegan = input()\n","  else : \n","    if (input_vegan == \"yes\"):\n","      my_dict_vegan = {'vegan' : \"5\"}\n","      break\n","    else:\n","      my_dict_vegan = {'vegan' : \"1\"} \n","      break\n","print(\"You decided that your products should be vegan :\", input_vegan)\n","\n","#User preference : Gluten free \n","print(\"Please indicate with yes or no if it is important to you to buy gluten-free products.\")\n","input_gluten_free = input()\n","\n","while True : \n"," if input_gluten_free not in (\"yes\",\"no\") :\n","    print(\"Please enter yes or no\")\n","    input_gluten_free = input()\n"," else:\n","    if (input_gluten_free == \"yes\"):\n","      my_dict_gluten_free = {'gluten-free' : \"5\"} \n","      break\n","    else:\n","      my_dict_gluten_free = {'gluten-free' : \"1\"} \n","      break\n","print(\"You decided that your products should be gluten.free :\" , input_gluten_free)\n","\n","print(\"Thank you for your patience. Now we can calculate the Happiness-Score for your product\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Hello. To calculate the Happiness-Index for the product of your choice, we first need to ask you some questions\n","Please indicate on a scale of 1 (low) to 5 (high) how important the price of a product is to you.\n","4\n","Your choice in the category price:  4 / 5\n","Please indicate on a scale of 1 (low) to 5 (high) how important is to you that a product is organic.\n","5\n","Your choice in the category sustainability:  5 / 5\n","Please indicate on a scale of 1 (low) to 5 (high) how important it is for you that a product is produced localy.\n","1\n","Your choice in the category local:  1 / 5\n","Please indicate with yes or no if it is important to you to buy vegan products.\n","yes\n","You decided that your products should be vegan : yes\n","Please indicate with yes or no if it is important to you to buy gluten-free products.\n","yes\n","You decided that your products should be gluten.free : yes\n","Thank you for your patience. Now we can calculate the Happiness-Score for your product\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bf2PlhSSUANR","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1617079435911,"user_tz":-120,"elapsed":487,"user":{"displayName":"Philipp Wegner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgySvzVyeieRI3LZNKVnii-4bj7AsVvvvKJt4tG8w=s64","userId":"04890888630639332040"}},"outputId":"09c3440c-aa93-401e-ffb7-91e7cc70107d"},"source":["\n","#load pandas and numpy\n","import pandas as pd\n","import numpy as np\n","\n","# Collection of the given input date into a pandas dataframe\n","\n","\n","# Dataframe \n","\n","preference=pd.DataFrame({\n","    'Your Preference (1-5)':[\n","    my_dict_price.get('price'),\n","    my_dict_sust.get('organic'),\n","    my_dict_local.get('local'),\n","    #my_dict_storage.get('easy storage'),\n","    my_dict_vegan.get('vegan'),\n","    my_dict_gluten_free.get('gluten-free')\n","    ]\n","})\n","\n","# indexing the rows accordingly to their values\n","#preference.index=['Organic','Price','Local','Easy Storage','vegan','glutenfree']\n","preference.index=['price','organic','local','vegan','gluten-free']\n","\n","\n","# visualization of the preferences \n","preference"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Your Preference (1-5)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>price</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>organic</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>local</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>vegan</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>gluten-free</th>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Your Preference (1-5)\n","price                           4\n","organic                         5\n","local                           1\n","vegan                           5\n","gluten-free                     5"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"jWKAEDU3ebRL","executionInfo":{"status":"ok","timestamp":1617079439426,"user_tz":-120,"elapsed":1236,"user":{"displayName":"Philipp Wegner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgySvzVyeieRI3LZNKVnii-4bj7AsVvvvKJt4tG8w=s64","userId":"04890888630639332040"}},"outputId":"dd5f9cf7-c95c-49c3-b9de-1bc668fa8d37"},"source":["\n","# some simple bar chart for visualisation purposes\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","plt.style.use('ggplot')\n","\n","x = ['price','organic','local','vegan','gluten-free']\n","#x = ['Organic','Price','Local','Easy Storage','vegan','glutenfree']\n","\n","pref = preference['Your Preference (1-5)']\n","x_pos = x\n","plt.bar(x_pos, pref, color='green')\n","plt.xlabel(\"Topic\")\n","plt.ylabel(\"Preference\")\n","plt.title(\"Chosen preference\")\n","\n","\n","\n","plt.xticks(x_pos, x)\n","\n","\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"u47P-r-MxYJi"},"source":["# Coding Phase 3\n","Combine the user input and the data, calculate ‘Product Happiness Score' for each product and show top 5 to user\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":221},"id":"wj24UFPJEDby","executionInfo":{"status":"ok","timestamp":1617079454072,"user_tz":-120,"elapsed":490,"user":{"displayName":"Philipp Wegner","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgySvzVyeieRI3LZNKVnii-4bj7AsVvvvKJt4tG8w=s64","userId":"04890888630639332040"}},"outputId":"2ebdb9d6-b4f4-4abb-d662-569b0cb29e7e"},"source":["# first combine the datasets\n","\n","#transpose the preferences\n","preference_trans = preference.T\n","\n","#and add them to the data frame\n","bakedgoods[\"preference_price\"] = int(preference_trans.price)-1\n","bakedgoods[\"preference_organic\"] = int(preference_trans.organic)-1\n","bakedgoods[\"preference_local\"] = int(preference_trans.local)-1\n","bakedgoods[\"preference_vegan\"] = int(preference_trans.vegan)-1\n","bakedgoods[\"preference_glutenfree\"] = int(preference_trans[\"gluten-free\"])-1\n","\n","\n","#then calculate the score\n","\n","bakedgoods[\"score\"]= bakedgoods.price*bakedgoods.preference_price + bakedgoods.organic* bakedgoods.preference_organic + bakedgoods.vegan*bakedgoods.preference_vegan + bakedgoods.local*bakedgoods.preference_local + bakedgoods[\"gluten-free\"]*bakedgoods.preference_glutenfree\n","\n","best_products = bakedgoods.sort_values(by=['score'],ascending=False)\n","print(\"The products with the highest ‘Product Happiness Score' are:\")\n","best_products.head(5)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The products with the highest ‘Product Happiness Score' are:\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>price</th>\n","      <th>organic</th>\n","      <th>vegan</th>\n","      <th>local</th>\n","      <th>gluten-free</th>\n","      <th>preference_price</th>\n","      <th>preference_organic</th>\n","      <th>preference_local</th>\n","      <th>preference_vegan</th>\n","      <th>preference_glutenfree</th>\n","      <th>score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>101</th>\n","      <td>Bauck HOF Bio Pizza-Teig, Vegan, Glutenfrei, 350g</td>\n","      <td>0.6</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>13.8</td>\n","    </tr>\n","    <tr>\n","      <th>141</th>\n","      <td>Alnavit Bio Knusperbrot Buchweizen, 150g</td>\n","      <td>0.2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>12.6</td>\n","    </tr>\n","    <tr>\n","      <th>139</th>\n","      <td>herzberger Bio Vollkornbrötchen, Vegan, 6 Stüc...</td>\n","      <td>0.8</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>10.4</td>\n","    </tr>\n","    <tr>\n","      <th>112</th>\n","      <td>Alnatura Bio Pita, 320 g</td>\n","      <td>0.8</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>10.4</td>\n","    </tr>\n","    <tr>\n","      <th>167</th>\n","      <td>Zeit für Brot Bioland Vollkorn-Saftkorn, 1 Stü...</td>\n","      <td>0.8</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>10.4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                  name  ... score\n","101  Bauck HOF Bio Pizza-Teig, Vegan, Glutenfrei, 350g  ...  13.8\n","141           Alnavit Bio Knusperbrot Buchweizen, 150g  ...  12.6\n","139  herzberger Bio Vollkornbrötchen, Vegan, 6 Stüc...  ...  10.4\n","112                           Alnatura Bio Pita, 320 g  ...  10.4\n","167  Zeit für Brot Bioland Vollkorn-Saftkorn, 1 Stü...  ...  10.4\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":9}]}]}